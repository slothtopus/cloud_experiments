#version 300 es

precision mediump float;
precision lowp sampler3D;

  #define MAX_STEPS 300
  #define MAX_DIST 100.
  #define SURF_DIST .01
  #define ABSORPTION 0.35f
  #define M_PI 3.1415

in vec2 v_position;

uniform mat4 u_box_transform_inverse;
uniform mat4 u_box_transform;
uniform mat4 u_light_transform;
uniform float u_stepsize;
uniform float u_time;
uniform int u_max_depth_steps;
uniform vec2 u_resolution;
uniform vec2 u_mousepos;

uniform sampler3D uTexture;

out vec4 fragColor; // Declare output fragment color

vec3 randomGradient3d(vec3 p, float seed) {
    p = p + 0.01f;
    float x = dot(p, vec3(123.4f, 234.5f, 345.6f));
    float y = dot(p, vec3(234.5f, 345.6f, 456.7f));
    float z = dot(p, vec3(345.6f, 456.7f, 567.8f));
    vec3 gradient = vec3(x, y, z);
    gradient = sin(gradient);
    gradient *= (43758.5453f + seed);
    //gradient = sin(gradient + u_time * 8.f);
    gradient = sin(gradient);
    return gradient;
}

float perlin3d(vec3 uv, float k, float seed) {
    uv = uv * k;

    vec3 gridId = floor(uv);
    vec3 gridUv = fract(uv);

    // using right-handed coordinate system
    // f = front, r = rear
    vec3 rbl = gridId + vec3(0, 0, 0);
    vec3 rbr = gridId + vec3(1, 0, 0);
    vec3 rtl = gridId + vec3(0, 1, 0);
    vec3 rtr = gridId + vec3(1, 1, 0);

    vec3 fbl = gridId + vec3(0, 0, 1);
    vec3 fbr = gridId + vec3(1, 0, 1);
    vec3 ftl = gridId + vec3(0, 1, 1);
    vec3 ftr = gridId + vec3(1, 1, 1);

    vec3 gradRbl = randomGradient3d(rbl, seed);
    vec3 gradRbr = randomGradient3d(rbr, seed);
    vec3 gradRtl = randomGradient3d(rtl, seed);
    vec3 gradRtr = randomGradient3d(rtr, seed);

    vec3 gradFbl = randomGradient3d(fbl, seed);
    vec3 gradFbr = randomGradient3d(fbr, seed);
    vec3 gradFtl = randomGradient3d(ftl, seed);
    vec3 gradFtr = randomGradient3d(ftr, seed);

    vec3 vFromRbl = gridUv - vec3(0, 0, 0);
    vec3 vFromRbr = gridUv - vec3(1, 0, 0);
    vec3 vFromRtl = gridUv - vec3(0, 1, 0);
    vec3 vFromRtr = gridUv - vec3(1, 1, 0);

    vec3 vFromFbl = gridUv - vec3(0, 0, 1);
    vec3 vFromFbr = gridUv - vec3(1, 0, 1);
    vec3 vFromFtl = gridUv - vec3(0, 1, 1);
    vec3 vFromFtr = gridUv - vec3(1, 1, 1);

    float dotRbl = dot(gradRbl, vFromRbl);
    float dotRbr = dot(gradRbr, vFromRbr);
    float dotRtl = dot(gradRtl, vFromRtl);
    float dotRtr = dot(gradRtr, vFromRtr);

    float dotFbl = dot(gradFbl, vFromFbl);
    float dotFbr = dot(gradFbr, vFromFbr);
    float dotFtl = dot(gradFtl, vFromFtl);
    float dotFtr = dot(gradFtr, vFromFtr);

    gridUv = smoothstep(0.0f, 1.0f, gridUv);

    float Rb = mix(dotRbl, dotRbr, gridUv.x);
    float Rt = mix(dotRtl, dotRtr, gridUv.x);
    float R = mix(Rb, Rt, gridUv.y);

    float Fb = mix(dotFbl, dotFbr, gridUv.x);
    float Ft = mix(dotFtl, dotFtr, gridUv.x);
    float F = mix(Fb, Ft, gridUv.y);

    float perlin = mix(R, F, gridUv.z);

    return perlin;
}

float getNoise(vec3 p) {
    return texture(uTexture, p).r;
    //return perlin3d(p, 10.0f, 123.4f) + 0.75f;

}

float sdBox(vec3 p, vec3 b) {
    vec3 q = abs(p) - b;
    return length(max(q, 0.0f)) + min(max(q.x, max(q.y, q.z)), 0.0f);
}

float sdEllipsoid(vec3 p, vec3 r) {
    float k0 = length(p / r);
    float k1 = length(p / (r * r));
    return k0 * (k0 - 1.0f) / k1;
}

float carveUp(vec3 p, float d) {
    # if 1
    float textureValue = getNoise(p / 6.0f + vec3(sin(u_time / 3.0f), cos(u_time / 2.123f), -sin(u_time)));
    # else
    float textureValue = getNoise(p / 15.0f);
    # endif
    return d - textureValue * 1.0f;
}

float sceneDistanceTransformed(vec3 p) {
    vec4 p_transformed = u_box_transform_inverse * vec4(p, 1);
    //return carveUp(p_transformed.xyz, sdBox(p_transformed.xyz, vec3(4, 2, 2)));
    //return sdBox(p_transformed.xyz, vec3(2, 2, 2));
    //return carveUp(p_transformed.xyz, sdEllipsoid(p_transformed.xyz, vec3(2, 2, 2)));
    return carveUp(p_transformed.xyz, min(sdEllipsoid(p_transformed.xyz, vec3(5, 2, 2)), sdEllipsoid(p_transformed.xyz - vec3(0, 1, 0), vec3(2.5f, 2, 2))));
}

vec3 GetNormal(vec3 p) {
    float d = sceneDistanceTransformed(p);
    vec2 e = vec2(.01f, 0);

    vec3 n = d - vec3(sceneDistanceTransformed(p - e.xyy), sceneDistanceTransformed(p - e.yxy), sceneDistanceTransformed(p - e.yyx));

    return normalize(n);
}

float GetLight(vec3 p, vec3 lightPos) {
    vec3 l = normalize(lightPos - p);
    vec3 n = GetNormal(p);

    float dif = clamp(dot(n, l), 0.f, 1.f);
    return dif;
}

float calculateThickness(vec3 entryPoint, vec3 rayDirection) {
    float totalDistance = 0.0f;
    vec3 currentPosition = entryPoint;

    for(int i = 0; i < 10000; i++) {
        currentPosition += rayDirection * u_stepsize; // Small step to ensure we start inside the object
        totalDistance += u_stepsize;
        float distanceToSurface = sceneDistanceTransformed(currentPosition);
        if(i >= u_max_depth_steps)
            break;
        if(distanceToSurface > SURF_DIST) {
            return totalDistance; // Exit point found
        }
        if(abs(totalDistance) >= MAX_DIST)
            break;
    }

    return totalDistance; // Object may be infinitely thick
}

float henyeyGreenstein(vec3 inVec, vec3 outVec) {
    float g = 0.25f;
    float g2 = g * g;
    float theta = acos(dot(inVec, outVec) / (length(inVec) + length(outVec)));
    return (1.0f - g2) / (4.0f * M_PI * pow(1.0f + g2 + 2.0f * g * cos(theta), 1.5f));
}

// For when our ray might need to go out and then in again
vec2 calculateWobblyTransmittanceAndLuminance(vec3 entryPoint, vec3 rayDirection) {
    vec3 lightPosition = (u_light_transform * vec4(0, 0, -50, 1)).xyz;
    float lightLuminance = 5.0f;

    float totalLightEmitted = 0.0f;
    float transmittance = 1.0f;

    float EXIT_DISTANCE = 3.0f;
    float totalDistance = 0.0f;

    vec3 currentRayPosition = entryPoint;

    for(int i = 0; i < 10000; i++) {
        currentRayPosition += rayDirection * u_stepsize; // Small step to ensure we start inside the object
        float distanceToSurface = sceneDistanceTransformed(currentRayPosition);

        // are we in the object?
        if(distanceToSurface < 0.0f) {
            totalDistance += u_stepsize;
            transmittance *= exp(-u_stepsize * ABSORPTION);

            // Get density-weighted distance of ray from currentRayPosition to light
            vec3 lightDirection = normalize(lightPosition - currentRayPosition);
            vec3 currentLightPosition = currentRayPosition;
            float lightTravelDistance = 0.0f;

            for(int j = 0; j < 10000; j++) {
                currentLightPosition += lightDirection * u_stepsize;
                float distanceToSurface2 = sceneDistanceTransformed(currentLightPosition);
                if(distanceToSurface2 < 0.0f) {
                    lightTravelDistance += u_stepsize;
                }
                if(j >= u_max_depth_steps)
                    break;
                if(distanceToSurface2 > EXIT_DISTANCE) {
                    break; // Exit point found
                }
            }

            float lightReachingPoint = exp(-lightTravelDistance * ABSORPTION) * lightLuminance;
            //float isotropicPhase = (1.0f / (4.0f * M_PI));
            float henyeyGphase = henyeyGreenstein(-rayDirection, lightDirection);
            totalLightEmitted += lightReachingPoint * henyeyGphase * transmittance * u_stepsize;
        }
        if(i >= u_max_depth_steps)
            break;
        if(distanceToSurface > EXIT_DISTANCE) {
            break; // Exit point found
        }
        if(abs(totalDistance) >= MAX_DIST)
            break;
    }

    return vec2(transmittance, totalLightEmitted);
    //return vec2(exp(-totalDistance * ABSORPTION), totalLightEmitted);
}

float RayMarch(vec3 ro, vec3 rd) {
    float dO = 0.f;
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 p = ro + rd * dO;
        float dS = sceneDistanceTransformed(p);
        dO += dS * 0.5f;
        if(dO > MAX_DIST || dS < SURF_DIST)
            break;
    }
    return dO;
}

void main() {
    vec3 ro = vec3(0, 0.5f, 5);
    float zoom = 2.5f;
    vec3 rd = normalize(vec3(v_position.x * (u_resolution.x / u_resolution.y) / zoom, v_position.y / zoom, -1));

    float d = RayMarch(ro, rd);

    vec3 cloudColour = vec3(1, 1, 1);
    vec3 shadowColour = vec3(0.533f, 0.639f, 0.804f);
    vec3 sunsetTint = vec3(0.97f, 0.42f, 0.26f);
    vec3 sunsetTint2 = vec3(0.91f, 0.67f, 0.39f);

    float yGradient = (v_position.y / 2.0f) + 0.5f;
    float yMouseGradient = (u_mousepos.y / 2.0f) + 0.5f;

    vec3 skyColorStart = yMouseGradient * vec3(0.54f, 0.90f, 0.99f) + (1.0f - yMouseGradient) * vec3(0.56f, 0.52f, 0.68f);
    vec3 skyColorEnd = yMouseGradient * vec3(0.05f, 0.33f, 0.71f) + (1.0f - yMouseGradient) * vec3(0.99f, 0.69f, 0.59f);
    vec3 skyColour = yGradient * skyColorStart + (1.0f - yGradient) * skyColorEnd;

    fragColor = vec4(skyColour, 1.0f);

    if(d <= 20.0f) {
        vec3 p = ro + rd * d;
        //float l = GetLight(ro + rd * d, vec3(0, 5, 5));
        //cloudColour = (1.0f - l) * lightColour + l * cloudColour;

        vec2 vals = calculateWobblyTransmittanceAndLuminance(p, rd);
        float t = vals.x;
        float l = vals.y + 0.4f;

        cloudColour = yMouseGradient * cloudColour + (1.0f - yMouseGradient) * sunsetTint2;
        cloudColour = cloudColour * l;

        //l = pow(l, 2.0f);

        //cloudColour = l * sunsetTint2 + (1.0f - l) * cloudColour;
        //float l = vals.y;
        fragColor = vec4(t * skyColour + (1.0f - t) * cloudColour, 1.0f);

        //fragColor = vec4(t * skyColour + l * cloudColour, 1.0f);
    }

}